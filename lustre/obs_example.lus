
-----------------------------------------------------------------
-- Boolean Switch
--
-- Model a switch with two buttons, Set and Reset.
-- Pressing Set turns the switch on.
-- Pressing Reset turns the switch off
-- If Set and Reset are initially both unpressed,
-- the initial position of the switch is determined by
-- a third signal, Init

node Switch( Set, Reset, Init : bool ) returns ( X : bool );
let

    X = if Set then true 
           else if Reset then false
           else (Init -> pre X);
tel

node Switch2( Set, Reset, Init : bool ) returns ( X : bool );
let
  X = if Reset then false else
        if Set then true else
          (Init -> pre(X));
tel


node Switch3( Set, Reset, Init : bool ) returns ( X : bool );
let
  X = Set or (not Reset and (Init -> pre(X))) ;
tel



--------------
-- Solution
----
node ReqSwitch( Set, Reset, Init : bool )
returns ( R1, R2, R3 : bool );
var X : bool;
let
  X = Switch( Set, Reset, Init );

  -- write a property that proves that setting turns the switch on
  R1  =  ...
  
  -- write a property that proves that resetting turns the switch off
  R2 =  ...
  
  -- write a property that proves that doing nothing maintains the previous value
  R3 = ...


tel


